{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.score = 0;\n        this.state = [\n            ...this.initialState\n        ];\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        const newState = [];\n        let canMove = false;\n        for(let i = 3; i >= 0; i--){\n            const row = this.state[i].filter((number)=>number !== 0);\n            for(let n = 1; n < row.length; n++)if (row[n] === row[n - 1]) {\n                row[n - 1] *= 2;\n                delete row[n];\n                this.score += row[n - 1];\n            }\n            const newRow = row.filter((number)=>number !== undefined);\n            for(let j = newRow.length; j < 4; j++)newRow.push(0);\n            newState[i] = newRow;\n        }\n        for(let i = 0; i <= 3; i++){\n            for(let n = 0; n <= 3; n++)if (newState[i][n] !== this.state[i][n]) canMove = true;\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n        }\n        this.checkLose();\n        this.checkWin();\n    }\n    moveRight() {\n        const newState = [];\n        let canMove = false;\n        for(let i = 3; i >= 0; i--){\n            const row = this.state[i].filter((number)=>number !== 0);\n            for(let n = row.length - 1; n >= 0; n--)if (row[n] === row[n - 1]) {\n                row[n] *= 2;\n                row[n - 1] = 0;\n                this.score += row[n];\n            }\n            const newRow = row.filter((number)=>number !== 0);\n            for(let j = newRow.length; j < 4; j++)newRow.unshift(0);\n            newState[i] = newRow;\n        }\n        for(let i = 0; i <= 3; i++){\n            for(let n = 0; n <= 3; n++)if (newState[i][n] !== this.state[i][n]) canMove = true;\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n        }\n        this.checkLose();\n        this.checkWin();\n    }\n    moveUp() {\n        this.state = this.turn(this.state);\n        this.moveLeft();\n        this.state = this.turn(this.state);\n    }\n    moveDown() {\n        this.state = this.turn(this.state);\n        this.moveRight();\n        this.state = this.turn(this.state);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addCell();\n        this.addCell();\n    // console.log(this.state);\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n    }\n    // Add your own methods here\n    addCell() {\n        const initial = Math.random() > 0.1 ? 2 : 4;\n        let count = 0;\n        do {\n            const row = Math.round(Math.random() * 3);\n            const column = Math.round(Math.random() * 3);\n            if (this.state[row][column] === 0) {\n                this.state[row][column] = initial;\n                count++;\n            }\n        }while (count < 1);\n    }\n    turn(table) {\n        const newTable = [];\n        for(let i = 0; i <= 3; i++){\n            const newRow = [\n                table[0][i],\n                table[1][i],\n                table[2][i],\n                table[3][i]\n            ];\n            newTable.push(newRow);\n        }\n        return newTable;\n    }\n    checkWin() {\n        for(let i = 0; i <= 3; i++){\n            for(let n = 0; n <= 3; n++)if (this.state[i][n] === 2048) this.win();\n        }\n    }\n    win() {\n        this.status = \"win\";\n    }\n    checkLose() {\n        let count = 0;\n        for(let i = 0; i <= 3; i++){\n            for(let n = 0; n <= 3; n++)if (this.state[i][n] === 0) count++;\n        }\n        if (count === 0) this.lose();\n    }\n    lose() {\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$tbody = document.querySelector(\"tbody\");\n// const messages = document.querySelectorAll('.message');\nconst $09e991522ca7e64e$var$mWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$mStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$mLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$buttonRestart = document.createElement(\"button\");\nconst $09e991522ca7e64e$var$controls = document.querySelector(\".controls\");\n$09e991522ca7e64e$var$buttonRestart.classList.add(\"restart\");\n$09e991522ca7e64e$var$buttonRestart.classList.add(\"button\");\n$09e991522ca7e64e$var$buttonRestart.textContent = \"Restart\";\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$bild();\n    $09e991522ca7e64e$var$mStart.classList.add(\"hidden\");\n});\n$09e991522ca7e64e$var$buttonRestart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$mStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$controls.append($09e991522ca7e64e$var$buttonStart);\n    $09e991522ca7e64e$var$buttonRestart.remove();\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$mWin.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$mLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$bild();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status === \"playing\") {\n        if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n        if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n        if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n        if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n        $09e991522ca7e64e$var$bild();\n        if ($09e991522ca7e64e$var$buttonStart) {\n            $09e991522ca7e64e$var$buttonStart.remove();\n            $09e991522ca7e64e$var$controls.append($09e991522ca7e64e$var$buttonRestart);\n        }\n        if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$mWin.classList.remove(\"hidden\");\n        if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$mLose.classList.remove(\"hidden\");\n    }\n});\nfunction $09e991522ca7e64e$var$bild() {\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    const rows = [\n        ...$09e991522ca7e64e$var$tbody.querySelectorAll(\".field-row\")\n    ];\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cells = [\n            ...rows[row].querySelectorAll(\".field-cell\")\n        ];\n        if ($09e991522ca7e64e$var$game.getState()[row][col] === 0) {\n            cells[col].textContent = null;\n            const cl = \"field-cell\";\n            cells[col].className = cl;\n        }\n        if ($09e991522ca7e64e$var$game.getState()[row][col] !== 0) {\n            cells[col].textContent = $09e991522ca7e64e$var$game.getState()[row][col];\n            const cl = \"field-cell--\" + $09e991522ca7e64e$var$game.getState()[row][col];\n            cells[col].className = \"field-cell\";\n            cells[col].classList.add(cl);\n        }\n    }\n}\n\n\n//# sourceMappingURL=index.76d7a1b8.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst buttonStart = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst tbody = document.querySelector('tbody');\n// const messages = document.querySelectorAll('.message');\nconst mWin = document.querySelector('.message-win');\nconst mStart = document.querySelector('.message-start');\nconst mLose = document.querySelector('.message-lose');\nconst buttonRestart = document.createElement('button');\nconst controls = document.querySelector('.controls');\n\nbuttonRestart.classList.add('restart');\nbuttonRestart.classList.add('button');\nbuttonRestart.textContent = 'Restart';\n\nbuttonStart.addEventListener('click', () => {\n  game.start();\n  bild();\n  mStart.classList.add('hidden');\n});\n\nbuttonRestart.addEventListener('click', () => {\n  mStart.classList.remove('hidden');\n  controls.append(buttonStart);\n  buttonRestart.remove();\n\n  if (game.status === 'win') {\n    mWin.classList.add('hidden');\n  }\n\n  if (game.status === 'lose') {\n    mLose.classList.add('hidden');\n  }\n\n  game.restart();\n  bild();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === 'playing') {\n    if (e.key === 'ArrowLeft') {\n      game.moveLeft();\n    }\n\n    if (e.key === 'ArrowRight') {\n      game.moveRight();\n    }\n\n    if (e.key === 'ArrowUp') {\n      game.moveUp();\n    }\n\n    if (e.key === 'ArrowDown') {\n      game.moveDown();\n    }\n\n    bild();\n\n    if (buttonStart) {\n      buttonStart.remove();\n\n      controls.append(buttonRestart);\n    }\n\n    if (game.status === 'win') {\n      mWin.classList.remove('hidden');\n    }\n\n    if (game.status === 'lose') {\n      mLose.classList.remove('hidden');\n    }\n  }\n});\n\nfunction bild() {\n  score.textContent = game.getScore();\n\n  const rows = [...tbody.querySelectorAll('.field-row')];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cells = [...rows[row].querySelectorAll('.field-cell')];\n\n      if (game.getState()[row][col] === 0) {\n        cells[col].textContent = null;\n\n        const cl = 'field-cell';\n\n        cells[col].className = cl;\n      }\n\n      if (game.getState()[row][col] !== 0) {\n        cells[col].textContent = game.getState()[row][col];\n\n        const cl = 'field-cell--' + game.getState()[row][col];\n\n        cells[col].className = 'field-cell';\n        cells[col].classList.add(cl);\n      }\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.score = 0;\n    this.state = [...this.initialState];\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    const newState = [];\n    let canMove = false;\n\n    for (let i = 3; i >= 0; i--) {\n      const row = this.state[i].filter((number) => number !== 0);\n\n      for (let n = 1; n < row.length; n++) {\n        if (row[n] === row[n - 1]) {\n          row[n - 1] *= 2;\n          delete row[n];\n\n          this.score += row[n - 1];\n        }\n      }\n\n      const newRow = row.filter((number) => number !== undefined);\n\n      for (let j = newRow.length; j < 4; j++) {\n        newRow.push(0);\n      }\n\n      newState[i] = newRow;\n    }\n\n    for (let i = 0; i <= 3; i++) {\n      for (let n = 0; n <= 3; n++) {\n        if (newState[i][n] !== this.state[i][n]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (canMove) {\n      this.state = newState;\n      this.addCell();\n    }\n\n    this.checkLose();\n    this.checkWin();\n  }\n\n  moveRight() {\n    const newState = [];\n    let canMove = false;\n\n    for (let i = 3; i >= 0; i--) {\n      const row = this.state[i].filter((number) => number !== 0);\n\n      for (let n = row.length - 1; n >= 0; n--) {\n        if (row[n] === row[n - 1]) {\n          row[n] *= 2;\n          row[n - 1] = 0;\n\n          this.score += row[n];\n        }\n      }\n\n      const newRow = row.filter((number) => number !== 0);\n\n      for (let j = newRow.length; j < 4; j++) {\n        newRow.unshift(0);\n      }\n\n      newState[i] = newRow;\n    }\n\n    for (let i = 0; i <= 3; i++) {\n      for (let n = 0; n <= 3; n++) {\n        if (newState[i][n] !== this.state[i][n]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (canMove) {\n      this.state = newState;\n      this.addCell();\n    }\n\n    this.checkLose();\n    this.checkWin();\n  }\n\n  moveUp() {\n    this.state = this.turn(this.state);\n\n    this.moveLeft();\n\n    this.state = this.turn(this.state);\n  }\n  moveDown() {\n    this.state = this.turn(this.state);\n\n    this.moveRight();\n\n    this.state = this.turn(this.state);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addCell();\n    this.addCell();\n    // console.log(this.state);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n  }\n\n  // Add your own methods here\n  addCell() {\n    const initial = Math.random() > 0.1 ? 2 : 4;\n    let count = 0;\n\n    do {\n      const row = Math.round(Math.random() * 3);\n      const column = Math.round(Math.random() * 3);\n\n      if (this.state[row][column] === 0) {\n        this.state[row][column] = initial;\n        count++;\n      }\n    } while (count < 1);\n  }\n\n  turn(table) {\n    const newTable = [];\n\n    for (let i = 0; i <= 3; i++) {\n      const newRow = [table[0][i], table[1][i], table[2][i], table[3][i]];\n\n      newTable.push(newRow);\n    }\n\n    return newTable;\n  }\n\n  checkWin() {\n    for (let i = 0; i <= 3; i++) {\n      for (let n = 0; n <= 3; n++) {\n        if (this.state[i][n] === 2048) {\n          this.win();\n        }\n      }\n    }\n  }\n\n  win() {\n    this.status = 'win';\n  }\n\n  checkLose() {\n    let count = 0;\n\n    for (let i = 0; i <= 3; i++) {\n      for (let n = 0; n <= 3; n++) {\n        if (this.state[i][n] === 0) {\n          count++;\n        }\n      }\n    }\n\n    if (count === 0) {\n      this.lose();\n    }\n  }\n\n  lose() {\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","state","status","moveLeft","newState","canMove","i","row","filter","number","n","length","newRow","undefined","j","push","addCell","checkLose","checkWin","moveRight","unshift","moveUp","turn","moveDown","getScore","getState","getStatus","start","restart","initial","Math","random","count","round","column","table","newTable","win","lose","$09e991522ca7e64e$var$buttonStart","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$tbody","$09e991522ca7e64e$var$mWin","$09e991522ca7e64e$var$mStart","$09e991522ca7e64e$var$mLose","$09e991522ca7e64e$var$buttonRestart","createElement","$09e991522ca7e64e$var$controls","$09e991522ca7e64e$var$bild","textContent","rows","querySelectorAll","col","cells","className","cl","classList","add","addEventListener","remove","append","e","key"],"version":3,"file":"index.76d7a1b8.js.map"}